{"version":3,"sources":["../src/guru-query.js"],"names":["promisifyAll","moduleRoot","process","cwd","dest","path","mkdir","program","database","fileName","methods","moduleName","resolverStr","createResolver","resolver","moduleFile","file","options","flag","writeFileAsync","then","console","log","yellow","catch","Error","error","createSchema","schema","schemaStr"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,mBAASA,YAAT;AACA,IAAMC,aAAgBC,QAAQC,GAAR,EAAhB,oBAAN;AACA,IAAMC,OAAO,gBAAQC,IAAR,GAAkBJ,UAAlB,SAAgC,gBAAQI,IAAxC,GAAiDJ,UAA9D;;IAEQK,K,qBAAAA,K;;YACkD,iBAAK;AAC7DC;AAD6D,CAAL,C;IAAlDC,Q,SAAAA,Q;IAAUC,Q,SAAAA,Q;IAAUC,O,SAAAA,O;IAASC,U,SAAAA,U;IAAYN,I,SAAAA,I;;AAIjD,IAAIO,oBAAJ;;AAEAN,MAAM,IAAN,EAAYD,IAAZ;;AAEA,SAASQ,cAAT,GAA2B;AACzB,MAAI,gBAAQC,QAAZ,EAAsB;AACpBF,kBAAc,qBAAS;AACrBJ,wBADqB;AAErBE,sBAFqB;AAGrBC;AAHqB,KAAT,CAAd;;AAMA,QAAMI,gCAA8BJ,UAA9B,IAA2CF,WAAW,MAAMA,QAAjB,GAA4B,EAAvE,SAAN;AACA,QAAMO,OAAUX,IAAV,SAAkBU,UAAxB;;AAEA,QAAME,UAAU,EAAEC,MAAM,IAAR,EAAhB;;AAEA,iBACGC,cADH,CACkBH,IADlB,EACwBJ,WADxB,EACqCK,OADrC,EAEGG,IAFH,CAEQ,YAAM;AACVC,cAAQC,GAAR,CAAY,gBAAMC,MAAN,cAAwBR,UAAxB,CAAZ;AACD,KAJH,EAKGS,KALH,CAKS,iBAAS;AACd,YAAM,IAAIC,KAAJ,CAAUC,KAAV,CAAN;AACD,KAPH;AAQD;AACF;;AAED,SAASC,YAAT,GAAyB;AACvB,MAAI,gBAAQC,MAAZ,EAAoB;AAClB,QAAMb,8BAA4BJ,UAA5B,IAAyCF,WAAW,MAAMA,QAAjB,GAA4B,EAArE,cAAN;AACA,QAAMO,OAAUX,IAAV,SAAkBU,UAAxB;AACA,QAAME,UAAU,EAAEC,MAAM,IAAR,EAAhB;;AAEA,QAAMW,YAAYnB,UAAU,mBAAO,EAAEA,gBAAF,EAAWC,sBAAX,EAAP,CAAV,GAA4C,EAA9D;;AAEA,iBACGQ,cADH,CACkBH,IADlB,EACwBa,SADxB,EACmCZ,OADnC,EAEGG,IAFH,CAEQ,YAAM;AACVC,cAAQC,GAAR,CAAY,gBAAMC,MAAN,cAAwBR,UAAxB,CAAZ;AACD,KAJH,EAKGS,KALH,CAKS,iBAAS;AACd,YAAM,IAAIC,KAAJ,CAAUC,KAAV,CAAN;AACD,KAPH;AAQD;AACF;;AAEDC;AACAd","file":"guru-query.js","sourcesContent":["import program, { args, resolver, schema } from './utils';\nimport Bluebird from 'bluebird';\nimport fs from 'fs';\nimport shell from 'shelljs';\nimport chalk from 'chalk';\n\nBluebird.promisifyAll(fs);\nconst moduleRoot = `${process.cwd()}/server/modules`;\nconst dest = program.path ? `${moduleRoot}/${program.path}` : moduleRoot;\n\nconst { mkdir } = shell;\nconst { database, fileName, methods, moduleName, path } = args({\n  program\n});\n\nlet resolverStr;\n\nmkdir('-p', path);\n\nfunction createResolver () {\n  if (program.resolver) {\n    resolverStr = resolver({\n      database,\n      methods,\n      moduleName\n    });\n\n    const moduleFile = `resolverQuery-${moduleName}${fileName ? '-' + fileName : ''}.js`;\n    const file = `${path}/${moduleFile}`;\n\n    const options = { flag: 'wx' };\n\n    fs\n      .writeFileAsync(file, resolverStr, options)\n      .then(() => {\n        console.log(chalk.yellow(`Created ${moduleFile}`));\n      })\n      .catch(error => {\n        throw new Error(error);\n      });\n  }\n}\n\nfunction createSchema () {\n  if (program.schema) {\n    const moduleFile = `schemaQuery-${moduleName}${fileName ? '-' + fileName : ''}.graphql`;\n    const file = `${path}/${moduleFile}`;\n    const options = { flag: 'wx' };\n\n    const schemaStr = methods ? schema({ methods, moduleName }) : '';\n\n    fs\n      .writeFileAsync(file, schemaStr, options)\n      .then(() => {\n        console.log(chalk.yellow(`Created ${moduleFile}`));\n      })\n      .catch(error => {\n        throw new Error(error);\n      });\n  }\n}\n\ncreateSchema();\ncreateResolver();\n"]}