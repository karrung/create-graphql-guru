{"version":3,"sources":["../src/utils.js"],"names":["args","resolver","schema","moduleRoot","process","cwd","capitalize","firstCharUpperCase","str","charAt","toUpperCase","substr","length","toLowerCase","option","parse","argv","program","module","Error","moduleName","split","fileName","methods","database","path","moduleMethods","map","method","importDatabase","join"],"mappings":";;;;;;QAoBgBA,I,GAAAA,I;QAeAC,Q,GAAAA,Q;QAuBAC,M,GAAAA,M;;AA1DhB;;;;;;AAEA,IAAMC,aAAgBC,QAAQC,GAAR,EAAhB,oBAAN;;AAEO,IAAMC,kCAAa,SAAbA,UAAa,MAAO;AAC/B,MAAMC,qBAAqBC,IAAIC,MAAJ,CAAW,CAAX,EAAcC,WAAd,EAA3B;AACA,cAAUH,kBAAV,GAA+BC,IAAIG,MAAJ,CAAW,CAAX,EAAcH,IAAII,MAAJ,GAAa,CAA3B,EAA8BC,WAA9B,EAA/B;AACD,CAHM;;kBAKQ,oBACZC,MADY,CAEX,mBAFW,EAGX,yDAHW,EAKZA,MALY,CAKL,uBALK,EAKoB,eALpB,EAMZA,MANY,CAML,2BANK,EAMwB,qCANxB,EAOZA,MAPY,CAOL,8BAPK,EAO2B,yBAP3B,EAQZA,MARY,CAQL,2BARK,EAQwB,sBARxB,EASZC,KATY,CASNX,QAAQY,IATF,C;AAWR,SAAShB,IAAT,OAA4B;AAAA,MAAXiB,OAAW,QAAXA,OAAW;;AACjC,MAAIA,QAAQC,MAAR,IAAkB,OAAOD,QAAQC,MAAf,KAA0B,QAAhD,EAA0D;AACxD,UAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;AACD,MAAMC,aAAaH,QAAQC,MAAR,CAAeG,KAAf,CAAqB,GAArB,CAAnB;;AAEA,SAAO;AACLD,gBAAYA,WAAW,CAAX,EAAcP,WAAd,EADP;AAELS,cAAUF,WAAW,CAAX,IAAgBA,WAAW,CAAX,EAAcP,WAAd,EAAhB,GAA8C,EAFnD;AAGLU,aAASN,QAAQjB,IAAR,CAAaY,MAAb,KAAwB,CAAxB,GAA4BK,QAAQjB,IAApC,GAA2C,IAH/C;AAILwB,cAAUP,QAAQO,QAAR,KAAqB,QAArB,GAAgCP,QAAQO,QAAxC,GAAmD,IAJxD;AAKLC,UAAMR,QAAQQ,IAAR,GAAkBtB,UAAlB,SAAgCc,QAAQQ,IAAxC,GAAiDtB;AALlD,GAAP;AAOD;;AAEM,SAASF,QAAT,QAAsD;AAAA,MAAjCuB,QAAiC,SAAjCA,QAAiC;AAAA,MAAvBD,OAAuB,SAAvBA,OAAuB;AAAA,MAAdH,UAAc,SAAdA,UAAc;;AAC3D,MAAMM,gBAAgBH,WAAW,IAAX,GAClB,EADkB,GAElBA,QAAQI,GAAR,CACE;AAAA,qBAEJC,MAFI;AAAA,GADF,CAFJ;;AAUA,MAAMC,iBAAiBL,uBACTA,QADS,qBACcA,QADd,mBAInB,EAJJ;;AAMA,SAAUK,cAAV,6BAAgDvB,WAAWc,UAAX,CAAhD,UAA0EI,WAAW,aAAaA,QAAb,GAAwB,GAAnC,GAAyC,EAAnH,YACAE,cAAcI,IAAd,CAAmB,IAAnB,CADA;AAID;;AAEM,SAAS5B,MAAT,QAA0C;AAAA,MAAvBqB,OAAuB,SAAvBA,OAAuB;AAAA,MAAdH,UAAc,SAAdA,UAAc;;AAC/C,SAAOG,QACJI,GADI,CAEH;AAAA,mCAEJP,UAFI,GAESd,WAAWsB,MAAX,CAFT,YAEkCtB,WAAWc,UAAX,CAFlC;AAAA,GAFG,EAQJU,IARI,CAQC,EARD,CAAP;AASD","file":"utils.js","sourcesContent":["import program from 'commander';\n\nconst moduleRoot = `${process.cwd()}/server/modules`;\n\nexport const capitalize = str => {\n  const firstCharUpperCase = str.charAt(0).toUpperCase();\n  return `${firstCharUpperCase}${str.substr(1, str.length - 1).toLowerCase()}`;\n};\n\nexport default program\n  .option(\n    '-p, --path [path]',\n    'Path to where module will be created, relative to root.'\n  )\n  .option('-m, --module [module]', 'Modules name.')\n  .option('-d, --database [database]', 'Extends module with database client')\n  .option('-r, --resolver [resolver...]', 'Create mutation resolve')\n  .option('-s, --schema [schema....]', 'Name of query module')\n  .parse(process.argv);\n\nexport function args ({ program }) {\n  if (program.module && typeof program.module !== 'string') {\n    throw new Error('No module name provide.');\n  }\n  const moduleName = program.module.split('.');\n\n  return {\n    moduleName: moduleName[0].toLowerCase(),\n    fileName: moduleName[1] ? moduleName[1].toLowerCase() : '',\n    methods: program.args.length !== 0 ? program.args : null,\n    database: program.database !== 'string' ? program.database : null,\n    path: program.path ? `${moduleRoot}/${program.path}` : moduleRoot\n  };\n}\n\nexport function resolver ({ database, methods, moduleName }) {\n  const moduleMethods = methods == null\n    ? []\n    : methods.map(\n        method =>\n          ` \n  ${method} ({ args, context, databases, locals, models, req }) {\n\n  }`\n      );\n\n  const importDatabase = database\n    ? `import ${database} from 'guru-${database};'\n    \n`\n    : '';\n\n  return `${importDatabase}export default class ${capitalize(moduleName)} ${database ? 'extends ' + database + ' ' : ''}{\n${moduleMethods.join('\\n')}\n};\n`;\n}\n\nexport function schema ({ methods, moduleName }) {\n  return methods\n    .map(\n      method =>\n        `# Add description\n${moduleName}${capitalize(method)}(): ${capitalize(moduleName)}\n\n`\n    )\n    .join('');\n}\n"]}