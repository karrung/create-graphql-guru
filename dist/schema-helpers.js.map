{"version":3,"sources":["../src/schema-helpers.js"],"names":["args","resolver","schema","moduleRoot","process","cwd","option","parse","argv","program","module","Error","moduleName","split","toLowerCase","fileName","methods","length","database","path","moduleMethods","map","method","importDatabase","join"],"mappings":";;;;;QAegBA,I,GAAAA,I;QAeAC,Q,GAAAA,Q;QAsBAC,M,GAAAA,M;;AApDhB;;;;AACA;;;;AACA,IAAMC,aAAgBC,QAAQC,GAAR,EAAhB,oBAAN;;kBAEe,oBACZC,MADY,CACL,qBADK,EACkB,cADlB,EAEZA,MAFY,CAEL,uBAFK,EAEoB,qCAFpB,EAGZA,MAHY,CAGL,uBAHK,EAGoB,yBAHpB,EAIZA,MAJY,CAIL,qBAJK,EAIkB,sBAJlB,EAKZA,MALY,CAMX,YANW,EAOX,yDAPW,EASZC,KATY,CASNH,QAAQI,IATF,C;AAWR,SAASR,IAAT,OAA4B;AAAA,MAAXS,OAAW,QAAXA,OAAW;;AACjC,MAAI,OAAOA,QAAQC,MAAf,KAA0B,QAA9B,EAAwC;AACtC,UAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;AACD,MAAMC,aAAaH,QAAQC,MAAR,CAAeG,KAAf,CAAqB,GAArB,CAAnB;;AAEA,SAAO;AACLD,gBAAYA,WAAW,CAAX,EAAcE,WAAd,EADP;AAELC,cAAUH,WAAW,CAAX,IAAgBA,WAAW,CAAX,EAAcE,WAAd,EAAhB,GAA8C,EAFnD;AAGLE,aAASP,QAAQT,IAAR,CAAaiB,MAAb,KAAwB,CAAxB,GAA4BR,QAAQT,IAApC,GAA2C,IAH/C;AAILkB,cAAUT,QAAQS,QAAR,KAAqB,QAArB,GAAgCT,QAAQS,QAAxC,GAAmD,IAJxD;AAKLC,UAAMV,QAAQU,IAAR,GAAkBhB,UAAlB,SAAgCM,QAAQU,IAAxC,GAAiDhB;AALlD,GAAP;AAOD;;AAEM,SAASF,QAAT,QAAsD;AAAA,MAAjCiB,QAAiC,SAAjCA,QAAiC;AAAA,MAAvBF,OAAuB,SAAvBA,OAAuB;AAAA,MAAdJ,UAAc,SAAdA,UAAc;;AAC3D,MAAMQ,gBAAgBJ,WAAW,IAAX,GAClB,EADkB,GAElBA,QAAQK,GAAR,CAAY;AAAA,qBACdC,MADc;AAAA,GAAZ,CAFJ;;AAQA,MAAMC,iBAAiBL,uBACTA,QADS,6BACsBA,QADtB,uBAKnB,EALJ;;AAOA,SAAUK,cAAV,6BAAgD,uBAAWX,UAAX,CAAhD,UAA0EM,WAAW,aAAaA,QAAb,GAAwB,GAAnC,GAAyC,EAAnH,YACAE,cAAcI,IAAd,CAAmB,IAAnB,CADA;AAID;;AAEM,SAAStB,MAAT,QAA0C;AAAA,MAAvBc,OAAuB,SAAvBA,OAAuB;AAAA,MAAdJ,UAAc,SAAdA,UAAc;;AAC/C,SAAOI,QACJK,GADI,CAEH;AAAA,mCAEJT,UAFI,GAES,uBAAWU,MAAX,CAFT,YAEkC,uBAAWV,UAAX,CAFlC;AAAA,GAFG,EAQJY,IARI,CAQC,EARD,CAAP;AASD","file":"schema-helpers.js","sourcesContent":["import program from 'commander';\nimport { capitalize } from './utils';\nconst moduleRoot = `${process.cwd()}/server/modules`;\n\nexport default program\n  .option('-m, --module <name>', 'Modules name')\n  .option('-d, --database <name>', 'Extends module with database client')\n  .option('-r, --resolver [true]', 'Create mutation resolve')\n  .option('-s, --schema [true]', 'Name of query module')\n  .option(\n    '-p, --path',\n    'Path to where module will be created, relative to root.'\n  )\n  .parse(process.argv);\n\nexport function args ({ program }) {\n  if (typeof program.module !== 'string') {\n    throw new Error('No module name provide.');\n  }\n  const moduleName = program.module.split('.');\n\n  return {\n    moduleName: moduleName[0].toLowerCase(),\n    fileName: moduleName[1] ? moduleName[1].toLowerCase() : '',\n    methods: program.args.length !== 0 ? program.args : null,\n    database: program.database !== 'string' ? program.database : null,\n    path: program.path ? `${moduleRoot}/${program.path}` : moduleRoot\n  };\n}\n\nexport function resolver ({ database, methods, moduleName }) {\n  const moduleMethods = methods == null\n    ? []\n    : methods.map(method => ` \n  ${method} ({ args, context, databases, locals, models, req }) {\n\n  }`\n    );\n\n  const importDatabase = database\n    ? `import ${database} from 'graphql-guru-${database};'\n    \n  \n`\n    : '';\n\n  return `${importDatabase}export default class ${capitalize(moduleName)} ${database ? 'extends ' + database + ' ' : ''}{\n${moduleMethods.join('\\n')}\n};\n`;\n}\n\nexport function schema ({ methods, moduleName }) {\n  return methods\n    .map(\n      method =>\n        `# Add description\n${moduleName}${capitalize(method)}(): ${capitalize(moduleName)}\n\n`\n    )\n    .join('');\n}\n"]}