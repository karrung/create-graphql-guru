{"version":3,"sources":["../src/guru-type.js"],"names":["promisifyAll","mkdir","option","parse","process","argv","module","Error","moduleRoot","cwd","moduleNameSplit","split","moduleName","toLowerCase","fileName","moduleFile","path","types","enum","interface","input","object","scalar","union","data","Object","keys","reduce","previous","key","typeName","props","definitionType","map","p","replace","join","file","writeFileAsync","flag","then","console","log","yellow","catch","error"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,mBAASA,YAAT;IACQC,K,qBAAAA,K;;;AAER,oBACGC,MADH,CAEI,mBAFJ,EAGI,yDAHJ,EAKGA,MALH,CAKU,uBALV,EAKmC,aALnC,EAMGA,MANH,CAMU,mBANV,EAM+B,iBAN/B,EAOGA,MAPH,CAOU,6BAPV,EAOyC,sBAPzC,EAQGA,MARH,CAQU,qBARV,EAQiC,kBARjC,EASGA,MATH,CASU,uBATV,EASmC,mBATnC,EAUGA,MAVH,CAUU,uBAVV,EAUmC,mBAVnC,EAWGA,MAXH,CAWU,qBAXV,EAWiC,kBAXjC,EAYGC,KAZH,CAYSC,QAAQC,IAZjB;;AAcA,IAAI,CAAC,oBAAQC,MAAT,IAAmB,OAAO,oBAAQA,MAAf,KAA0B,QAAjD,EAA2D;AACzD,QAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,IAAMC,aAAgBJ,QAAQK,GAAR,EAAhB,oBAAN;AACA,IAAMC,kBAAkB,oBAAQJ,MAAR,CAAeK,KAAf,CAAqB,GAArB,CAAxB;AACA,IAAMC,aAAaF,gBAAgB,CAAhB,EAAmBG,WAAnB,EAAnB;AACA,IAAMC,WAAWJ,gBAAgB,CAAhB,IAAqBA,gBAAgB,CAAhB,EAAmBG,WAAnB,EAArB,GAAwD,EAAzE;AACA,IAAME,6BAA2BH,UAA3B,IAAwCE,WAAW,MAAMA,QAAjB,GAA4B,EAApE,cAAN;AACA,IAAME,OAAO,oBAAQA,IAAR,GAAkBR,UAAlB,SAAgC,oBAAQQ,IAAxC,GAAiDR,UAA9D;;AAEA,IAAMS,QAAQ;AACZC,QAAM,oBAAQA,IADF;AAEZC,aAAW,oBAAQA,SAFP;AAGZC,SAAO,oBAAQA,KAHH;AAIZC,UAAQ,oBAAQA,MAJJ;AAKZC,UAAQ,oBAAQA,MALJ;AAMZC,SAAO,oBAAQA;AANH,CAAd;;AASA,IAAMC,OAAOC,OAAOC,IAAP,CAAYT,KAAZ,EAAmBU,MAAnB,CAA0B,UAACC,QAAD,EAAWC,GAAX,EAAmB;AACxD,MAAIZ,MAAMY,GAAN,KAAc,IAAlB,EAAwB,OAAOD,QAAP;;AADgC,yBAE3BX,MAAMY,GAAN,EAAWlB,KAAX,CAAiB,GAAjB,CAF2B;AAAA;AAAA,MAEjDmB,QAFiD;AAAA,MAEpCC,KAFoC;;AAIxD,MAAMC,iBAAiBH,QAAQ,QAAR,GAAmB,MAAnB,GAA4BA,GAAnD;AACA,SAAUD,QAAV,YAEAI,cAFA,SAEkB,uBAAWF,QAAX,CAFlB,cAGEC,MAAME,GAAN,CAAU;AAAA,WAAKC,EAAEC,OAAF,CAAU,GAAV,EAAe,IAAf,CAAL;AAAA,GAAV,EAAqCC,IAArC,CAA0C,MAA1C,CAHF;AAKD,CAVY,KAAb;;AAYAnC,MAAM,IAAN,EAAYe,IAAZ;;AAEA,IAAMqB,OAAUrB,IAAV,SAAkBD,UAAxB;;AAEA,aACGuB,cADH,CACkBD,IADlB,EACwBb,IADxB,EAC8B,EAAEe,MAAM,GAAR,EAD9B,EAEGC,IAFH,CAEQ,YAAM;AACVC,UAAQC,GAAR,CAAY,gBAAMC,MAAN,cAAwB5B,UAAxB,CAAZ;AACD,CAJH,EAKG6B,KALH,CAKS,iBAAS;AACd,QAAM,IAAIrC,KAAJ,CAAUsC,KAAV,CAAN;AACD,CAPH","file":"guru-type.js","sourcesContent":["import program from 'commander';\nimport { capitalize } from './utils';\nimport Bluebird from 'bluebird';\nimport fs from 'fs';\nimport shell from 'shelljs';\nimport chalk from 'chalk';\n\nBluebird.promisifyAll(fs);\nconst { mkdir } = shell;\n\nprogram\n  .option(\n    '-p, --path [path]',\n    'Path to where module will be created, relative to root.'\n  )\n  .option('-m, --module [scalar]', 'Module name')\n  .option('-e, --enum [enum]', 'Enum definition')\n  .option('-f, --interface [Interface]', 'interface definition')\n  .option('-i, --input [input]', 'input definition')\n  .option('-o, --object [object]', 'Object definition')\n  .option('-s, --scalar [scalar]', 'Scalar definition')\n  .option('-u, --union [union]', 'Union definition')\n  .parse(process.argv);\n\nif (!program.module || typeof program.module !== 'string') {\n  throw new Error('No module name provide.');\n}\n\nconst moduleRoot = `${process.cwd()}/server/modules`;\nconst moduleNameSplit = program.module.split('.');\nconst moduleName = moduleNameSplit[0].toLowerCase();\nconst fileName = moduleNameSplit[1] ? moduleNameSplit[1].toLowerCase() : '';\nconst moduleFile = `schemaType-${moduleName}${fileName ? '-' + fileName : ''}.graphql`;\nconst path = program.path ? `${moduleRoot}/${program.path}` : moduleRoot;\n\nconst types = {\n  enum: program.enum,\n  interface: program.interface,\n  input: program.input,\n  object: program.object,\n  scalar: program.scalar,\n  union: program.union\n};\n\nconst data = Object.keys(types).reduce((previous, key) => {\n  if (types[key] == null) return previous;\n  const [typeName, ...props] = types[key].split(' ');\n\n  const definitionType = key === 'object' ? 'type' : key;\n  return `${previous}\n\n${definitionType} ${capitalize(typeName)} {\n  ${props.map(p => p.replace(':', ': ')).join('\\n  ')}\n}`;\n}, ``);\n\nmkdir('-p', path);\n\nconst file = `${path}/${moduleFile}`;\n\nfs\n  .writeFileAsync(file, data, { flag: 'a' })\n  .then(() => {\n    console.log(chalk.yellow(`Created ${moduleFile}`));\n  })\n  .catch(error => {\n    throw new Error(error);\n  });\n"]}