{"version":3,"sources":["../src/guru-type.js"],"names":["promisifyAll","mkdir","option","parse","process","argv","module","Error","moduleRoot","cwd","moduleNameSplit","split","moduleName","toLowerCase","fileName","moduleFile","props","args","length","path","propsStr","map","prop","join","data","file","writeFileAsync","flag","then","console","log","yellow","catch","error"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,mBAASA,YAAT;IACQC,K,qBAAAA,K;;;AAER,oBACGC,MADH,CAEI,mBAFJ,EAGI,yDAHJ,EAKGA,MALH,CAKU,uBALV,EAKmC,eALnC,EAMGC,KANH,CAMSC,QAAQC,IANjB;;AAQA,IAAI,oBAAQC,MAAR,IAAkB,OAAO,oBAAQA,MAAf,KAA0B,QAAhD,EAA0D;AACxD,QAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,IAAMC,aAAgBJ,QAAQK,GAAR,EAAhB,oBAAN;AACA,IAAMC,kBAAkB,oBAAQJ,MAAR,CAAeK,KAAf,CAAqB,GAArB,CAAxB;AACA,IAAMC,aAAaF,gBAAgB,CAAhB,EAAmBG,WAAnB,EAAnB;AACA,IAAMC,WAAWJ,gBAAgB,CAAhB,IAAqBA,gBAAgB,CAAhB,EAAmBG,WAAnB,EAArB,GAAwD,EAAzE;AACA,IAAME,6BAA2BH,UAA3B,IAAwCE,WAAW,MAAMA,QAAjB,GAA4B,EAApE,cAAN;AACA,IAAME,QAAQ,oBAAQC,IAAR,CAAaC,MAAb,KAAwB,CAAxB,GAA4B,oBAAQD,IAApC,GAA2C,IAAzD;AACA,IAAME,OAAO,oBAAQA,IAAR,GAAkBX,UAAlB,SAAgC,oBAAQW,IAAxC,GAAiDX,UAA9D;AACA,IAAMY,WAAWJ,MAAMK,GAAN,CAAU;AAAA,cAAWC,IAAX;AAAA,CAAV,EAA6BC,IAA7B,CAAkC,MAAlC,CAAjB;AACA,IAAMC,iBAAe,uBAAWZ,UAAX,CAAf,cACFQ,QADE,SAAN;;AAIAnB,MAAM,IAAN,EAAYkB,IAAZ;;AAEA,IAAMM,OAAUN,IAAV,SAAkBJ,UAAxB;;AAEA,aACGW,cADH,CACkBD,IADlB,EACwBD,IADxB,EAC8B,EAAEG,MAAM,IAAR,EAD9B,EAEGC,IAFH,CAEQ,YAAM;AACVC,UAAQC,GAAR,CAAY,gBAAMC,MAAN,cAAwBhB,UAAxB,CAAZ;AACD,CAJH,EAKGiB,KALH,CAKS,iBAAS;AACd,QAAM,IAAIzB,KAAJ,CAAU0B,KAAV,CAAN;AACD,CAPH","file":"guru-type.js","sourcesContent":["import program from 'commander';\nimport { capitalize } from './utils';\nimport Bluebird from 'bluebird';\nimport fs from 'fs';\nimport shell from 'shelljs';\nimport chalk from 'chalk';\n\nBluebird.promisifyAll(fs);\nconst { mkdir } = shell;\n\nprogram\n  .option(\n    '-p, --path [path]',\n    'Path to where module will be created, relative to root.'\n  )\n  .option('-m, --module [module]', 'Modules name.')\n  .parse(process.argv);\n\nif (program.module && typeof program.module !== 'string') {\n  throw new Error('No module name provide.');\n}\n\nconst moduleRoot = `${process.cwd()}/server/modules`;\nconst moduleNameSplit = program.module.split('.');\nconst moduleName = moduleNameSplit[0].toLowerCase();\nconst fileName = moduleNameSplit[1] ? moduleNameSplit[1].toLowerCase() : '';\nconst moduleFile = `schemaType-${moduleName}${fileName ? '-' + fileName : ''}.graphql`;\nconst props = program.args.length !== 0 ? program.args : null;\nconst path = program.path ? `${moduleRoot}/${program.path}` : moduleRoot;\nconst propsStr = props.map(prop => `${prop}`).join('\\n  ');\nconst data = `type ${capitalize(moduleName)} {\n  ${propsStr} \n}`;\n\nmkdir('-p', path);\n\nconst file = `${path}/${moduleFile}`;\n\nfs\n  .writeFileAsync(file, data, { flag: 'wx' })\n  .then(() => {\n    console.log(chalk.yellow(`Created ${moduleFile}`));\n  })\n  .catch(error => {\n    throw new Error(error);\n  });\n"]}